//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.12.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using stoktakip.HelperClasses;
using stoktakip.FactoryClasses;
using stoktakip.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace stoktakip.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'StockTransaction'.<br/><br/></summary>
	[Serializable]
	public partial class StockTransactionEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private ProductEntity _product;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static StockTransactionEntityStaticMetaData _staticMetaData = new StockTransactionEntityStaticMetaData();
		private static StockTransactionRelations _relationsFactory = new StockTransactionRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Product</summary>
			public static readonly string Product = "Product";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class StockTransactionEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public StockTransactionEntityStaticMetaData()
			{
				SetEntityCoreInfo("StockTransactionEntity", InheritanceHierarchyType.None, false, (int)stoktakip.EntityType.StockTransactionEntity, typeof(StockTransactionEntity), typeof(StockTransactionEntityFactory), false);
				AddNavigatorMetaData<StockTransactionEntity, ProductEntity>("Product", "StockTransactions", (a, b) => a._product = b, a => a._product, (a, b) => a.Product = b, stoktakip.RelationClasses.StaticStockTransactionRelations.ProductEntityUsingProductIdStatic, ()=>new StockTransactionRelations().ProductEntityUsingProductId, null, new int[] { (int)StockTransactionFieldIndex.ProductId }, null, true, (int)stoktakip.EntityType.ProductEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static StockTransactionEntity()
		{
		}

		/// <summary> CTor</summary>
		public StockTransactionEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public StockTransactionEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this StockTransactionEntity</param>
		public StockTransactionEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for StockTransaction which data should be fetched into this StockTransaction object</param>
		public StockTransactionEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for StockTransaction which data should be fetched into this StockTransaction object</param>
		/// <param name="validator">The custom validator object for this StockTransactionEntity</param>
		public StockTransactionEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected StockTransactionEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProduct() { return CreateRelationInfoForNavigator("Product"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this StockTransactionEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static StockTransactionRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProduct { get { return _staticMetaData.GetPrefetchPathElement("Product", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>The Amount property of the Entity StockTransaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "stock_transaction"."amount".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 Amount
		{
			get { return (System.Int32)GetValue((int)StockTransactionFieldIndex.Amount, true); }
			set { SetValue((int)StockTransactionFieldIndex.Amount, value); }
		}

		/// <summary>The Description property of the Entity StockTransaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "stock_transaction"."description".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Description
		{
			get { return (System.String)GetValue((int)StockTransactionFieldIndex.Description, true); }
			set { SetValue((int)StockTransactionFieldIndex.Description, value); }
		}

		/// <summary>The Id property of the Entity StockTransaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "stock_transaction"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)StockTransactionFieldIndex.Id, true); }
			set { SetValue((int)StockTransactionFieldIndex.Id, value); }
		}

		/// <summary>The ProductId property of the Entity StockTransaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "stock_transaction"."product_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ProductId
		{
			get { return (System.Int32)GetValue((int)StockTransactionFieldIndex.ProductId, true); }
			set { SetValue((int)StockTransactionFieldIndex.ProductId, value); }
		}

		/// <summary>The TransactionDate property of the Entity StockTransaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "stock_transaction"."transaction_date".<br/>Table field type characteristics (type, precision, scale, length): Timestamp, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime TransactionDate
		{
			get { return (System.DateTime)GetValue((int)StockTransactionFieldIndex.TransactionDate, true); }
			set { SetValue((int)StockTransactionFieldIndex.TransactionDate, value); }
		}

		/// <summary>The TransactionType property of the Entity StockTransaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "stock_transaction"."transaction_type".<br/>Table field type characteristics (type, precision, scale, length): Smallint, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int16 TransactionType
		{
			get { return (System.Int16)GetValue((int)StockTransactionFieldIndex.TransactionType, true); }
			set { SetValue((int)StockTransactionFieldIndex.TransactionType, value); }
		}

		/// <summary>Gets / sets related entity of type 'ProductEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ProductEntity Product
		{
			get { return _product; }
			set { SetSingleRelatedEntityNavigator(value, "Product"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace stoktakip
{
	public enum StockTransactionFieldIndex
	{
		///<summary>Amount. </summary>
		Amount,
		///<summary>Description. </summary>
		Description,
		///<summary>Id. </summary>
		Id,
		///<summary>ProductId. </summary>
		ProductId,
		///<summary>TransactionDate. </summary>
		TransactionDate,
		///<summary>TransactionType. </summary>
		TransactionType,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace stoktakip.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: StockTransaction. </summary>
	public partial class StockTransactionRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between StockTransactionEntity and ProductEntity over the m:1 relation they have, using the relation between the fields: StockTransaction.ProductId - Product.Id</summary>
		public virtual IEntityRelation ProductEntityUsingProductId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Product", false, new[] { ProductFields.Id, StockTransactionFields.ProductId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticStockTransactionRelations
	{
		internal static readonly IEntityRelation ProductEntityUsingProductIdStatic = new StockTransactionRelations().ProductEntityUsingProductId;

		/// <summary>CTor</summary>
		static StaticStockTransactionRelations() { }
	}
}
