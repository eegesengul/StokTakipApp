//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.12.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using stoktakip.HelperClasses;
using stoktakip.FactoryClasses;
using stoktakip.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace stoktakip.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Product'.<br/><br/></summary>
	[Serializable]
	public partial class ProductEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<StockTransactionEntity> _stockTransactions;
		private CategoryEntity _category;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static ProductEntityStaticMetaData _staticMetaData = new ProductEntityStaticMetaData();
		private static ProductRelations _relationsFactory = new ProductRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Category</summary>
			public static readonly string Category = "Category";
			/// <summary>Member name StockTransactions</summary>
			public static readonly string StockTransactions = "StockTransactions";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class ProductEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public ProductEntityStaticMetaData()
			{
				SetEntityCoreInfo("ProductEntity", InheritanceHierarchyType.None, false, (int)stoktakip.EntityType.ProductEntity, typeof(ProductEntity), typeof(ProductEntityFactory), false);
				AddNavigatorMetaData<ProductEntity, EntityCollection<StockTransactionEntity>>("StockTransactions", a => a._stockTransactions, (a, b) => a._stockTransactions = b, a => a.StockTransactions, () => new ProductRelations().StockTransactionEntityUsingProductId, typeof(StockTransactionEntity), (int)stoktakip.EntityType.StockTransactionEntity);
				AddNavigatorMetaData<ProductEntity, CategoryEntity>("Category", "Products", (a, b) => a._category = b, a => a._category, (a, b) => a.Category = b, stoktakip.RelationClasses.StaticProductRelations.CategoryEntityUsingCategoryIdStatic, ()=>new ProductRelations().CategoryEntityUsingCategoryId, null, new int[] { (int)ProductFieldIndex.CategoryId }, null, true, (int)stoktakip.EntityType.CategoryEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static ProductEntity()
		{
		}

		/// <summary> CTor</summary>
		public ProductEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public ProductEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this ProductEntity</param>
		public ProductEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Product which data should be fetched into this Product object</param>
		public ProductEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Product which data should be fetched into this Product object</param>
		/// <param name="validator">The custom validator object for this ProductEntity</param>
		public ProductEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected ProductEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'StockTransaction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStockTransactions() { return CreateRelationInfoForNavigator("StockTransactions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Category' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCategory() { return CreateRelationInfoForNavigator("Category"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this ProductEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static ProductRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'StockTransaction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStockTransactions { get { return _staticMetaData.GetPrefetchPathElement("StockTransactions", CommonEntityBase.CreateEntityCollection<StockTransactionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Category' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCategory { get { return _staticMetaData.GetPrefetchPathElement("Category", CommonEntityBase.CreateEntityCollection<CategoryEntity>()); } }

		/// <summary>The CategoryId property of the Entity Product<br/><br/></summary>
		/// <remarks>Mapped on  table field: "product"."category_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 CategoryId
		{
			get { return (System.Int32)GetValue((int)ProductFieldIndex.CategoryId, true); }
			set { SetValue((int)ProductFieldIndex.CategoryId, value); }
		}

		/// <summary>The Id property of the Entity Product<br/><br/></summary>
		/// <remarks>Mapped on  table field: "product"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)ProductFieldIndex.Id, true); }
			set { SetValue((int)ProductFieldIndex.Id, value); }
		}

		/// <summary>The Name property of the Entity Product<br/><br/></summary>
		/// <remarks>Mapped on  table field: "product"."name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)ProductFieldIndex.Name, true); }
			set { SetValue((int)ProductFieldIndex.Name, value); }
		}

		/// <summary>The PurchasePrice property of the Entity Product<br/><br/></summary>
		/// <remarks>Mapped on  table field: "product"."purchase_price".<br/>Table field type characteristics (type, precision, scale, length): Numeric, 10, 2, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal PurchasePrice
		{
			get { return (System.Decimal)GetValue((int)ProductFieldIndex.PurchasePrice, true); }
			set { SetValue((int)ProductFieldIndex.PurchasePrice, value); }
		}

		/// <summary>The SalePrice property of the Entity Product<br/><br/></summary>
		/// <remarks>Mapped on  table field: "product"."sale_price".<br/>Table field type characteristics (type, precision, scale, length): Numeric, 10, 2, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal SalePrice
		{
			get { return (System.Decimal)GetValue((int)ProductFieldIndex.SalePrice, true); }
			set { SetValue((int)ProductFieldIndex.SalePrice, value); }
		}

		/// <summary>The StockAmount property of the Entity Product<br/><br/></summary>
		/// <remarks>Mapped on  table field: "product"."stock_amount".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 StockAmount
		{
			get { return (System.Int32)GetValue((int)ProductFieldIndex.StockAmount, true); }
			set { SetValue((int)ProductFieldIndex.StockAmount, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'StockTransactionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(StockTransactionEntity))]
		public virtual EntityCollection<StockTransactionEntity> StockTransactions { get { return GetOrCreateEntityCollection<StockTransactionEntity, StockTransactionEntityFactory>("Product", true, false, ref _stockTransactions); } }

		/// <summary>Gets / sets related entity of type 'CategoryEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CategoryEntity Category
		{
			get { return _category; }
			set { SetSingleRelatedEntityNavigator(value, "Category"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace stoktakip
{
	public enum ProductFieldIndex
	{
		///<summary>CategoryId. </summary>
		CategoryId,
		///<summary>Id. </summary>
		Id,
		///<summary>Name. </summary>
		Name,
		///<summary>PurchasePrice. </summary>
		PurchasePrice,
		///<summary>SalePrice. </summary>
		SalePrice,
		///<summary>StockAmount. </summary>
		StockAmount,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace stoktakip.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Product. </summary>
	public partial class ProductRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between ProductEntity and StockTransactionEntity over the 1:n relation they have, using the relation between the fields: Product.Id - StockTransaction.ProductId</summary>
		public virtual IEntityRelation StockTransactionEntityUsingProductId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "StockTransactions", true, new[] { ProductFields.Id, StockTransactionFields.ProductId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ProductEntity and CategoryEntity over the m:1 relation they have, using the relation between the fields: Product.CategoryId - Category.Id</summary>
		public virtual IEntityRelation CategoryEntityUsingCategoryId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Category", false, new[] { CategoryFields.Id, ProductFields.CategoryId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticProductRelations
	{
		internal static readonly IEntityRelation StockTransactionEntityUsingProductIdStatic = new ProductRelations().StockTransactionEntityUsingProductId;
		internal static readonly IEntityRelation CategoryEntityUsingCategoryIdStatic = new ProductRelations().CategoryEntityUsingCategoryId;

		/// <summary>CTor</summary>
		static StaticProductRelations() { }
	}
}
